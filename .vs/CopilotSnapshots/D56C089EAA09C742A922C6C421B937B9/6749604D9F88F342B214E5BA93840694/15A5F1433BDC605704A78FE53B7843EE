# Plan de Desarrollo - Sistema de Gestión de Frutas
## .NET Framework 4.8 con Arquitectura en Capas

### Descripción General
Este proyecto implementará un sistema completo de gestión de frutas utilizando .NET Framework 4.8 y C# 7.3, siguiendo una arquitectura en capas con separación de responsabilidades.

### Arquitectura de la Solución

#### 1. **slnEntidades** (Class Library)
- **Propósito**: Contiene las entidades del dominio
- **Contenido**:
  - `Usuario.cs` - Entidad para autenticación
  - `Fruta.cs` - Entidad principal del negocio
  - `Log.cs` - Entidad para auditoría
  - `BaseEntity.cs` - Clase base con propiedades comunes

#### 2. **slnDatos** (Class Library)
- **Propósito**: Capa de acceso a datos con patrón Repository
- **Contenido**:
  - `Context/FrutasContext.cs` - Contexto de Entity Framework
  - `Repositories/IRepository.cs` - Interfaz genérica
  - `Repositories/UsuarioRepository.cs`
  - `Repositories/FrutaRepository.cs`
  - `Repositories/LogRepository.cs`
  - `Migrations/` - Migraciones de base de datos
  - `Connection/SqlConnectionHelper.cs`

#### 3. **slnControl** (Class Library)
- **Propósito**: Lógica de negocio y servicios
- **Contenido**:
  - `Services/UsuarioService.cs` - Lógica de autenticación
  - `Services/FrutaService.cs` - Lógica CRUD de frutas
  - `Services/LogService.cs` - Gestión de logs
  - `Security/PasswordHelper.cs` - Encriptación de contraseñas
  - `Security/SessionHelper.cs` - Manejo de sesiones
  - `Validators/` - Validaciones de negocio
  - `DTOs/` - Data Transfer Objects

#### 4. **slnFrutas** (Web Application)
- **Propósito**: Aplicación web principal (UI)
- **Contenido**:
  - `Login.aspx` - Página de inicio de sesión
  - `Register.aspx` - Página de registro
  - `Default.aspx` - Dashboard principal
  - `Frutas/` - Páginas CRUD de frutas
    - `ListaFrutas.aspx`
    - `AgregarFruta.aspx`
    - `EditarFruta.aspx`
  - `Master Pages/` - Plantillas maestras
  - `App_Code/` - Clases de código
  - `Scripts/` - JavaScript y jQuery
  - `Styles/` - CSS y estilos

#### 5. **FrutasAPI** (ASP.NET Web API)
- **Propósito**: API REST para exponer servicios de frutas
- **Contenido**:
  - `Controllers/`
    - `FrutasController.cs` - Endpoints CRUD para frutas
    - `UsuariosController.cs` - Endpoints de autenticación
    - `ReportesController.cs` - Endpoints para reportes y estadísticas
  - `Models/`
    - `ApiResponse.cs` - Modelo de respuesta estándar
    - `FrutaApiModel.cs` - Modelo específico para API
    - `LoginRequest.cs` - Modelo para requests de login
    - `RegisterRequest.cs` - Modelo para requests de registro
  - `Filters/`
    - `AuthenticationFilter.cs` - Filtro de autenticación
    - `ExceptionFilter.cs` - Manejo de excepciones
    - `LoggingFilter.cs` - Logging de requests
  - `Helpers/`
    - `ApiKeyHelper.cs` - Validación de API Keys
    - `ResponseHelper.cs` - Helper para responses consistentes
  - `Documentation/`
    - Swagger/OpenAPI documentation

### Tecnologías y Patrones

#### Tecnologías Principales
- **.NET Framework 4.8**
- **C# 7.3**
- **ASP.NET Web Forms**
- **ASP.NET Web API 2**
- **Entity Framework 6.x**
- **SQL Server**
- **Swagger/OpenAPI** (para documentación de API)
- **Postman Collection** (para testing de API)

#### Patrones de Diseño
- **Repository Pattern** - Acceso a datos
- **Service Layer Pattern** - Lógica de negocio
- **DTO Pattern** - Transferencia de datos
- **Dependency Injection** - Inyección de dependencias
- **RESTful API Design** - Diseño de API REST
- **Filter Pattern** - Filtros de API

#### Características Técnicas
- **Autenticación Web**: Sistema de login/registro con hash de contraseñas y sesiones
- **Autenticación API**: API Keys y/o Bearer tokens
- **Autorización**: Control de acceso basado en roles
- **Logging**: Registro de operaciones en base de datos
- **Validaciones**: Client-side, server-side y API validations
- **Responsive Design**: Bootstrap para UI web
- **Error Handling**: Manejo centralizado de errores
- **Configuration**: App.config y Web.config
- **API Documentation**: Swagger/OpenAPI integration
- **CORS Support**: Cross-Origin Resource Sharing
- **Rate Limiting**: Control de límites de requests
- **Content Negotiation**: JSON/XML responses

### Base de Datos

#### Tablas Principales
```sql
-- Tabla Usuarios
CREATE TABLE Usuarios (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    Username NVARCHAR(50) UNIQUE NOT NULL,
    Email NVARCHAR(100) UNIQUE NOT NULL,
    PasswordHash NVARCHAR(255) NOT NULL,
    Salt NVARCHAR(255) NOT NULL,
    FechaCreacion DATETIME2 DEFAULT GETDATE(),
    Activo BIT DEFAULT 1
);

-- Tabla Frutas
CREATE TABLE Frutas (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    Nombre NVARCHAR(100) NOT NULL,
    Descripcion NVARCHAR(500),
    Precio DECIMAL(10,2) NOT NULL,
    Stock INT NOT NULL,
    FechaCreacion DATETIME2 DEFAULT GETDATE(),
    FechaModificacion DATETIME2,
    UsuarioCreacion INT FOREIGN KEY REFERENCES Usuarios(Id),
    UsuarioModificacion INT FOREIGN KEY REFERENCES Usuarios(Id),
    Activo BIT DEFAULT 1
);

-- Tabla Logs
CREATE TABLE Logs (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    UsuarioId INT FOREIGN KEY REFERENCES Usuarios(Id),
    Accion NVARCHAR(100) NOT NULL,
    Tabla NVARCHAR(50) NOT NULL,
    RegistroId INT,
    DetalleAntes NVARCHAR(MAX),
    DetalleDepues NVARCHAR(MAX),
    Fecha DATETIME2 DEFAULT GETDATE(),
    IP NVARCHAR(45)
);

-- Tabla ApiKeys (Nueva para autenticación de API)
CREATE TABLE ApiKeys (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    KeyValue NVARCHAR(255) UNIQUE NOT NULL,
    UsuarioId INT FOREIGN KEY REFERENCES Usuarios(Id),
    Nombre NVARCHAR(100) NOT NULL,
    FechaCreacion DATETIME2 DEFAULT GETDATE(),
    FechaExpiracion DATETIME2,
    Activo BIT DEFAULT 1,
    UltimoUso DATETIME2
);
```

### Funcionalidades Principales

#### Autenticación y Autorización
- [x] Registro de usuarios con validaciones (Web + API)
- [x] Login con encriptación de contraseñas (Web + API)
- [x] Session management (Web)
- [x] API Key management (API)
- [x] Logout seguro (Web)

#### CRUD de Frutas
- [x] Listar frutas con paginación (Web + API)
- [x] Agregar nueva fruta (Web + API)
- [x] Editar fruta existente (Web + API)
- [x] Eliminar fruta (soft delete) (Web + API)
- [x] Búsqueda y filtros (Web + API)

#### Logging y Auditoría
- [x] Registro de todas las operaciones CRUD
- [x] Seguimiento de cambios
- [x] Logs de autenticación (Web + API)
- [x] Información de IP y timestamp
- [x] API request logging

#### API REST Endpoints
- [x] **GET** `/api/frutas` - Obtener lista de frutas
- [x] **GET** `/api/frutas/{id}` - Obtener fruta por ID
- [x] **POST** `/api/frutas` - Crear nueva fruta
- [x] **PUT** `/api/frutas/{id}` - Actualizar fruta
- [x] **DELETE** `/api/frutas/{id}` - Eliminar fruta
- [x] **GET** `/api/frutas/search?q={query}` - Buscar frutas
- [x] **GET** `/api/usuarios/auth` - Autenticación
- [x] **POST** `/api/usuarios/register` - Registro
- [x] **GET** `/api/reportes/estadisticas` - Estadísticas
- [x] **GET** `/api/reportes/stock` - Reporte de stock

### Fases de Desarrollo

#### Fase 1: Infraestructura Base
1. Crear estructura de proyectos
2. Configurar Entity Framework
3. Crear entidades base
4. Implementar repositorios

#### Fase 2: Lógica de Negocio
1. Implementar servicios
2. Crear validadores
3. Configurar seguridad
4. Implementar logging

#### Fase 3: Interfaz Web
1. Crear master pages
2. Implementar páginas de autenticación
3. Desarrollar CRUD de frutas
4. Aplicar estilos y validaciones

#### Fase 4: API REST
1. Configurar ASP.NET Web API 2
2. Implementar controllers de API
3. Configurar autenticación de API
4. Implementar filtros y middleware
5. Documentar API con Swagger
6. Crear collection de Postman

#### Fase 5: Testing y Deployment
1. Pruebas unitarias
2. Pruebas de integración
3. Testing de API endpoints
4. Configuración de despliegue
5. Documentación final

### Configuración del Entorno

#### Prerequisitos
- Visual Studio 2019/2022
- SQL Server (LocalDB o Express)
- .NET Framework 4.8 SDK
- IIS Express
- Postman (para testing de API)
- SQL Server Management Studio (opcional)

#### Paquetes NuGet Requeridos
- EntityFramework 6.4.4
- Microsoft.AspNet.WebApi 5.2.9
- Microsoft.AspNet.WebApi.WebHost 5.2.9
- Microsoft.AspNet.Web.Optimization
- Bootstrap 4.6.0
- jQuery 3.6.0
- System.Data.SqlClient
- BCrypt.Net-Next (para hashing de contraseñas)
- Swashbuckle (para Swagger documentation)
- Microsoft.AspNet.Cors (para CORS support)
- Newtonsoft.Json (para JSON serialization)

### Mejores Prácticas Implementadas

#### Código
- Nomenclatura consistente (PascalCase, camelCase)
- Comentarios XML en métodos públicos
- Manejo de excepciones centralizado
- Separación de responsabilidades
- Principios SOLID
- RESTful API conventions

#### Seguridad
- Hash de contraseñas con salt
- Validación de entrada (Web + API)
- Prevención de SQL Injection
- Control de sesiones (Web)
- API Key validation (API)
- CORS configuration
- Rate limiting
- Input sanitization

#### Performance
- Lazy loading en Entity Framework
- Paginación de resultados (Web + API)
- Caché de datos frecuentes
- Optimización de consultas
- Connection pooling
- API response caching
- Compression for API responses

#### API Design
- RESTful endpoint design
- Consistent response format
- Proper HTTP status codes
- Content negotiation (JSON/XML)
- API versioning support
- Comprehensive error responses
- Swagger/OpenAPI documentation
- Request/Response logging

Este plan asegura un aprendizaje completo de .NET Framework 4.8 con ejemplos prácticos, arquitectura profesional y exposición a tecnologías web modernas incluyendo APIs REST.