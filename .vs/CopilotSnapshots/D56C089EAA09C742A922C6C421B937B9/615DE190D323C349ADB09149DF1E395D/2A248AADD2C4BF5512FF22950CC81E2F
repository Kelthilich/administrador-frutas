using System;
using System.Collections.Generic;

namespace frutas.DTOs
{
    /// <summary>
    /// DTO para respuestas estándar de la aplicación
    /// </summary>
    /// <typeparam name="T">Tipo de datos de la respuesta</typeparam>
    public class ResponseDto<T>
    {
        public bool Exitoso { get; set; }
        public string Mensaje { get; set; }
        public T Data { get; set; }
        public List<string> Errores { get; set; }
        public DateTime FechaRespuesta { get; set; }

        public ResponseDto()
        {
            Errores = new List<string>();
            FechaRespuesta = DateTime.Now;
        }

        public static ResponseDto<T> Exito(T data, string mensaje = "Operación exitosa")
        {
            return new ResponseDto<T>
            {
                Exitoso = true,
                Mensaje = mensaje,
                Data = data
            };
        }

        public static ResponseDto<T> Error(string mensaje, List<string> errores = null)
        {
            return new ResponseDto<T>
            {
                Exitoso = false,
                Mensaje = mensaje,
                Errores = errores ?? new List<string>()
            };
        }

        public static ResponseDto<T> Error(string mensaje, string error)
        {
            return new ResponseDto<T>
            {
                Exitoso = false,
                Mensaje = mensaje,
                Errores = new List<string> { error }
            };
        }
    }

    /// <summary>
    /// DTO para respuestas sin datos específicos
    /// </summary>
    public class ResponseDto : ResponseDto<object>
    {
        public static ResponseDto Exito(string mensaje = "Operación exitosa")
        {
            return new ResponseDto
            {
                Exitoso = true,
                Mensaje = mensaje
            };
        }

        public new static ResponseDto Error(string mensaje, List<string> errores = null)
        {
            return new ResponseDto
            {
                Exitoso = false,
                Mensaje = mensaje,
                Errores = errores ?? new List<string>()
            };
        }

        public new static ResponseDto Error(string mensaje, string error)
        {
            return new ResponseDto
            {
                Exitoso = false,
                Mensaje = mensaje,
                Errores = new List<string> { error }
            };
        }
    }

    /// <summary>
    /// DTO para logs
    /// </summary>
    public class LogDto
    {
        public int Id { get; set; }
        public int? UsuarioId { get; set; }
        public string Username { get; set; }
        public string Accion { get; set; }
        public string Tabla { get; set; }
        public int? RegistroId { get; set; }
        public string DetalleAntes { get; set; }
        public string DetalleDepues { get; set; }
        public DateTime Fecha { get; set; }
        public string IP { get; set; }
        public string UserAgent { get; set; }
        public string Endpoint { get; set; }
        public string MetodoHttp { get; set; }
        public long? TiempoEjecucion { get; set; }
        public bool Exitoso { get; set; }
        public string MensajeError { get; set; }
        public string Severidad { get; set; }
    }

    /// <summary>
    /// DTO para filtros de logs
    /// </summary>
    public class LogFiltroDto
    {
        public int? UsuarioId { get; set; }
        public string Username { get; set; }
        public string Accion { get; set; }
        public string Tabla { get; set; }
        public string Severidad { get; set; }
        public bool? Exitoso { get; set; }
        public DateTime? FechaDesde { get; set; }
        public DateTime? FechaHasta { get; set; }
        public string IP { get; set; }

        // Paginación
        public int Pagina { get; set; } = 1;
        public int TamañoPagina { get; set; } = 20;
    }

    /// <summary>
    /// DTO para API Keys
    /// </summary>
    public class ApiKeyDto
    {
        public int Id { get; set; }
        public string KeyValue { get; set; }
        public int UsuarioId { get; set; }
        public string UsuarioNombre { get; set; }
        public string Nombre { get; set; }
        public string Descripcion { get; set; }
        public DateTime FechaCreacion { get; set; }
        public DateTime? FechaExpiracion { get; set; }
        public bool Activo { get; set; }
        public DateTime? UltimoUso { get; set; }
        public int ContadorUsos { get; set; }
        public int LimitePorHora { get; set; }
        public string Permisos { get; set; }
        public string IPsPermitidas { get; set; }
        public bool EstaVencida => FechaExpiracion.HasValue && FechaExpiracion.Value <= DateTime.Now;
    }

    /// <summary>
    /// DTO para crear API Key
    /// </summary>
    public class ApiKeyFormDto
    {
        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "El nombre es requerido")]
        [System.ComponentModel.DataAnnotations.StringLength(100, ErrorMessage = "El nombre no puede exceder 100 caracteres")]
        public string Nombre { get; set; }

        [System.ComponentModel.DataAnnotations.StringLength(500, ErrorMessage = "La descripción no puede exceder 500 caracteres")]
        public string Descripcion { get; set; }

        public DateTime? FechaExpiracion { get; set; }

        [System.ComponentModel.DataAnnotations.Range(1, 10000, ErrorMessage = "El límite por hora debe estar entre 1 y 10,000")]
        public int LimitePorHora { get; set; } = 1000;

        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Los permisos son requeridos")]
        public string Permisos { get; set; } = "READ";

        [System.ComponentModel.DataAnnotations.StringLength(500, ErrorMessage = "Las IPs permitidas no pueden exceder 500 caracteres")]
        public string IPsPermitidas { get; set; }
    }
}