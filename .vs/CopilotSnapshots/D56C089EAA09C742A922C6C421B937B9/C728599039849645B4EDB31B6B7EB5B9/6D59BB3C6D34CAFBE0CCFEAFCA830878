using System;
using System.Collections.Generic;
using System.Linq;
using frutas.DTOs;
using frutas.Models;
using frutas.Repositories;
using frutas.Security;

namespace frutas.Services
{
    /// <summary>
    /// Interfaz para el servicio de usuarios
    /// Define las operaciones de negocio para la gestión de usuarios
    /// </summary>
    public interface IUsuarioService
    {
        // Autenticación
        ResponseDto<AuthResponseDto> Login(LoginDto loginDto);
        ResponseDto<UsuarioDto> Registrar(RegistroDto registroDto);
        ResponseDto Logout();
        ResponseDto<UsuarioDto> CambiarPassword(int usuarioId, CambioPasswordDto cambioDto);

        // Gestión de usuarios
        ResponseDto<UsuarioDto> ObtenerPorId(int id);
        ResponseDto<UsuarioDto> ObtenerPorUsername(string username);
        ResponseDto<IEnumerable<UsuarioDto>> ObtenerTodos();
        ResponseDto<IEnumerable<UsuarioDto>> ObtenerPorRol(string rol);
        ResponseDto<UsuarioDto> ActualizarPerfil(int usuarioId, UsuarioDto usuarioDto);
        ResponseDto ActivarDesactivar(int usuarioId, bool activo);

        // Seguridad
        ResponseDto BloquearUsuario(int usuarioId, string motivo);
        ResponseDto DesbloquearUsuario(int usuarioId);
        ResponseDto<bool> ValidarCredenciales(string username, string password);
        ResponseDto<string> GenerarPasswordTemporal(int usuarioId);

        // Validaciones
        ResponseDto<bool> ValidarUsernameDisponible(string username);
        ResponseDto<bool> ValidarEmailDisponible(string email);
    }

    /// <summary>
    /// Implementación del servicio de usuarios
    /// Contiene toda la lógica de negocio relacionada con usuarios
    /// </summary>
    public class UsuarioService : IUsuarioService
    {
        private readonly IUsuarioRepository _usuarioRepository;
        private readonly ILogRepository _logRepository;
        private const int MAX_INTENTOS_LOGIN = 5;
        private const int MINUTOS_BLOQUEO = 15;

        public UsuarioService(IUsuarioRepository usuarioRepository, ILogRepository logRepository)
        {
            _usuarioRepository = usuarioRepository ?? throw new ArgumentNullException(nameof(usuarioRepository));
            _logRepository = logRepository ?? throw new ArgumentNullException(nameof(logRepository));
        }

        public UsuarioService()
        {
            _usuarioRepository = new UsuarioRepository();
            _logRepository = new LogRepository();
        }

        #region Autenticación

        public ResponseDto<AuthResponseDto> Login(LoginDto loginDto)
        {
            try
            {
                // Validar datos de entrada
                if (string.IsNullOrEmpty(loginDto.Username) || string.IsNullOrEmpty(loginDto.Password))
                {
                    RegistrarLog("LOGIN_FAILED", "Usuarios", $"Datos de login incompletos para: {loginDto.Username}");
                    return ResponseDto<AuthResponseDto>.Error("Debe proporcionar usuario y contraseña");
                }

                // Obtener usuario
                var usuario = _usuarioRepository.ObtenerPorUsername(loginDto.Username);
                if (usuario == null)
                {
                    RegistrarLog("LOGIN_FAILED", "Usuarios", $"Usuario no encontrado: {loginDto.Username}");
                    return ResponseDto<AuthResponseDto>.Error("Credenciales inválidas");
                }

                // Verificar si está bloqueado
                if (usuario.CuentaBloqueada)
                {
                    if (usuario.FechaBloqueo.HasValue && 
                        DateTime.Now.Subtract(usuario.FechaBloqueo.Value).TotalMinutes < MINUTOS_BLOQUEO)
                    {
                        RegistrarLog("LOGIN_BLOCKED", "Usuarios", $"Intento de login con cuenta bloqueada: {loginDto.Username}");
                        return ResponseDto<AuthResponseDto>.Error($"Cuenta bloqueada. Intente nuevamente en {MINUTOS_BLOQUEO} minutos");
                    }
                    else
                    {
                        // Desbloquear automáticamente si ha pasado el tiempo
                        _usuarioRepository.DesbloquearUsuario(usuario.Id);
                        usuario.CuentaBloqueada = false;
                        usuario.IntentosFallidos = 0;
                    }
                }

                // Verificar contraseña
                if (!PasswordHelper.VerificarPassword(loginDto.Password, usuario.PasswordHash, usuario.Salt))
                {
                    // Incrementar intentos fallidos
                    usuario.IntentosFallidos++;
                    _usuarioRepository.ActualizarIntentosFallidos(usuario.Id, usuario.IntentosFallidos);

                    // Bloquear si excede máximo intentos
                    if (usuario.IntentosFallidos >= MAX_INTENTOS_LOGIN)
                    {
                        _usuarioRepository.BloquearUsuario(usuario.Id, DateTime.Now);
                        RegistrarLog("USER_BLOCKED", "Usuarios", $"Usuario bloqueado por exceso de intentos: {loginDto.Username}");
                        return ResponseDto<AuthResponseDto>.Error($"Cuenta bloqueada por {MINUTOS_BLOQUEO} minutos debido a múltiples intentos fallidos");
                    }

                    RegistrarLog("LOGIN_FAILED", "Usuarios", $"Contraseña incorrecta para: {loginDto.Username}");
                    return ResponseDto<AuthResponseDto>.Error("Credenciales inválidas");
                }

                // Login exitoso
                _usuarioRepository.ActualizarUltimoLogin(usuario.Id);
                
                var usuarioDto = MapearAUsuarioDto(usuario);
                var authResponse = new AuthResponseDto
                {
                    Exitoso = true,
                    Mensaje = "Login exitoso",
                    Usuario = usuarioDto,
                    FechaExpiracion = DateTime.Now.AddHours(8) // Sesión de 8 horas
                };

                RegistrarLog("LOGIN_SUCCESS", "Usuarios", $"Login exitoso para: {loginDto.Username}", usuario.Id);
                
                return ResponseDto<AuthResponseDto>.Exito(authResponse, "Login exitoso");
            }
            catch (Exception ex)
            {
                RegistrarLog("LOGIN_ERROR", "Usuarios", $"Error en login: {ex.Message}", null, "ERROR");
                return ResponseDto<AuthResponseDto>.Error("Error interno del servidor");
            }
        }

        public ResponseDto<UsuarioDto> Registrar(RegistroDto registroDto)
        {
            try
            {
                // Validar datos
                var validacionResult = ValidarRegistro(registroDto);
                if (!validacionResult.Exitoso)
                {
                    return ResponseDto<UsuarioDto>.Error(validacionResult.Mensaje, validacionResult.Errores);
                }

                // Verificar que username y email no existan
                if (_usuarioRepository.ExisteUsername(registroDto.Username))
                {
                    RegistrarLog("REGISTER_FAILED", "Usuarios", $"Username ya existe: {registroDto.Username}");
                    return ResponseDto<UsuarioDto>.Error("El nombre de usuario ya está en uso");
                }

                if (_usuarioRepository.ExisteEmail(registroDto.Email))
                {
                    RegistrarLog("REGISTER_FAILED", "Usuarios", $"Email ya existe: {registroDto.Email}");
                    return ResponseDto<UsuarioDto>.Error("El email ya está registrado");
                }

                // Crear hash de contraseña
                var (hash, salt) = PasswordHelper.CrearHashCompleto(registroDto.Password);

                // Crear usuario
                var usuario = new Usuario
                {
                    Username = registroDto.Username,
                    Email = registroDto.Email,
                    PasswordHash = hash,
                    Salt = salt,
                    NombreCompleto = registroDto.NombreCompleto,
                    Rol = "Usuario", // Rol por defecto
                    FechaCreacion = DateTime.Now,
                    Activo = true
                };

                var usuarioCreado = _usuarioRepository.Agregar(usuario);
                var usuarioDto = MapearAUsuarioDto(usuarioCreado);

                RegistrarLog("USER_CREATED", "Usuarios", $"Usuario registrado: {registroDto.Username}", usuarioCreado.Id);

                return ResponseDto<UsuarioDto>.Exito(usuarioDto, "Usuario registrado exitosamente");
            }
            catch (Exception ex)
            {
                RegistrarLog("REGISTER_ERROR", "Usuarios", $"Error en registro: {ex.Message}", null, "ERROR");
                return ResponseDto<UsuarioDto>.Error("Error interno del servidor");
            }
        }

        public ResponseDto Logout()
        {
            try
            {
                var usuarioActual = SessionHelper.UsuarioActual;
                if (usuarioActual != null)
                {
                    RegistrarLog("LOGOUT", "Usuarios", $"Logout de usuario: {usuarioActual.Username}", usuarioActual.Id);
                }

                SessionHelper.CerrarSesion();
                return ResponseDto.Exito("Sesión cerrada exitosamente");
            }
            catch (Exception ex)
            {
                RegistrarLog("LOGOUT_ERROR", "Usuarios", $"Error en logout: {ex.Message}", null, "ERROR");
                return ResponseDto.Error("Error al cerrar sesión");
            }
        }

        public ResponseDto<UsuarioDto> CambiarPassword(int usuarioId, CambioPasswordDto cambioDto)
        {
            try
            {
                var usuario = _usuarioRepository.ObtenerPorId(usuarioId);
                if (usuario == null)
                {
                    return ResponseDto<UsuarioDto>.Error("Usuario no encontrado");
                }

                // Verificar contraseña actual
                if (!PasswordHelper.VerificarPassword(cambioDto.PasswordActual, usuario.PasswordHash, usuario.Salt))
                {
                    RegistrarLog("PASSWORD_CHANGE_FAILED", "Usuarios", $"Contraseña actual incorrecta para usuario: {usuario.Username}", usuarioId);
                    return ResponseDto<UsuarioDto>.Error("La contraseña actual es incorrecta");
                }

                // Validar nueva contraseña
                var validacionPassword = PasswordHelper.ValidarFortaleza(cambioDto.NuevaPassword);
                if (!string.IsNullOrEmpty(validacionPassword))
                {
                    return ResponseDto<UsuarioDto>.Error(validacionPassword);
                }

                // Crear nuevo hash
                var (nuevoHash, nuevoSalt) = PasswordHelper.CrearHashCompleto(cambioDto.NuevaPassword);
                
                usuario.PasswordHash = nuevoHash;
                usuario.Salt = nuevoSalt;
                usuario.FechaModificacion = DateTime.Now;
                usuario.UsuarioModificacion = usuarioId;

                _usuarioRepository.Actualizar(usuario);

                RegistrarLog("PASSWORD_CHANGED", "Usuarios", $"Password cambiado para usuario: {usuario.Username}", usuarioId);

                return ResponseDto<UsuarioDto>.Exito(MapearAUsuarioDto(usuario), "Contraseña actualizada exitosamente");
            }
            catch (Exception ex)
            {
                RegistrarLog("PASSWORD_CHANGE_ERROR", "Usuarios", $"Error cambiando password: {ex.Message}", usuarioId, "ERROR");
                return ResponseDto<UsuarioDto>.Error("Error interno del servidor");
            }
        }

        #endregion

        #region Gestión de usuarios

        public ResponseDto<UsuarioDto> ObtenerPorId(int id)
        {
            try
            {
                var usuario = _usuarioRepository.ObtenerPorId(id);
                if (usuario == null)
                {
                    return ResponseDto<UsuarioDto>.Error("Usuario no encontrado");
                }

                return ResponseDto<UsuarioDto>.Exito(MapearAUsuarioDto(usuario));
            }
            catch (Exception ex)
            {
                RegistrarLog("GET_USER_ERROR", "Usuarios", $"Error obteniendo usuario {id}: {ex.Message}", null, "ERROR");
                return ResponseDto<UsuarioDto>.Error("Error interno del servidor");
            }
        }

        public ResponseDto<UsuarioDto> ObtenerPorUsername(string username)
        {
            try
            {
                var usuario = _usuarioRepository.ObtenerPorUsername(username);
                if (usuario == null)
                {
                    return ResponseDto<UsuarioDto>.Error("Usuario no encontrado");
                }

                return ResponseDto<UsuarioDto>.Exito(MapearAUsuarioDto(usuario));
            }
            catch (Exception ex)
            {
                RegistrarLog("GET_USER_ERROR", "Usuarios", $"Error obteniendo usuario {username}: {ex.Message}", null, "ERROR");
                return ResponseDto<UsuarioDto>.Error("Error interno del servidor");
            }
        }

        public ResponseDto<IEnumerable<UsuarioDto>> ObtenerTodos()
        {
            try
            {
                var usuarios = _usuarioRepository.ObtenerActivos();
                var usuariosDto = usuarios.Select(MapearAUsuarioDto);

                return ResponseDto<IEnumerable<UsuarioDto>>.Exito(usuariosDto);
            }
            catch (Exception ex)
            {
                RegistrarLog("GET_USERS_ERROR", "Usuarios", $"Error obteniendo usuarios: {ex.Message}", null, "ERROR");
                return ResponseDto<IEnumerable<UsuarioDto>>.Error("Error interno del servidor");
            }
        }

        public ResponseDto<IEnumerable<UsuarioDto>> ObtenerPorRol(string rol)
        {
            try
            {
                var usuarios = _usuarioRepository.ObtenerPorRol(rol);
                var usuariosDto = usuarios.Select(MapearAUsuarioDto);

                return ResponseDto<IEnumerable<UsuarioDto>>.Exito(usuariosDto);
            }
            catch (Exception ex)
            {
                RegistrarLog("GET_USERS_BY_ROLE_ERROR", "Usuarios", $"Error obteniendo usuarios por rol {rol}: {ex.Message}", null, "ERROR");
                return ResponseDto<IEnumerable<UsuarioDto>>.Error("Error interno del servidor");
            }
        }

        public ResponseDto<UsuarioDto> ActualizarPerfil(int usuarioId, UsuarioDto usuarioDto)
        {
            try
            {
                var usuario = _usuarioRepository.ObtenerPorId(usuarioId);
                if (usuario == null)
                {
                    return ResponseDto<UsuarioDto>.Error("Usuario no encontrado");
                }

                // Actualizar campos permitidos
                usuario.NombreCompleto = usuarioDto.NombreCompleto;
                usuario.Email = usuarioDto.Email;
                usuario.FechaModificacion = DateTime.Now;
                usuario.UsuarioModificacion = usuarioId;

                _usuarioRepository.Actualizar(usuario);

                RegistrarLog("USER_UPDATED", "Usuarios", $"Perfil actualizado para usuario: {usuario.Username}", usuarioId);

                return ResponseDto<UsuarioDto>.Exito(MapearAUsuarioDto(usuario), "Perfil actualizado exitosamente");
            }
            catch (Exception ex)
            {
                RegistrarLog("UPDATE_USER_ERROR", "Usuarios", $"Error actualizando usuario {usuarioId}: {ex.Message}", usuarioId, "ERROR");
                return ResponseDto<UsuarioDto>.Error("Error interno del servidor");
            }
        }

        public ResponseDto ActivarDesactivar(int usuarioId, bool activo)
        {
            try
            {
                var usuario = _usuarioRepository.ObtenerPorId(usuarioId);
                if (usuario == null)
                {
                    return ResponseDto.Error("Usuario no encontrado");
                }

                usuario.Activo = activo;
                usuario.FechaModificacion = DateTime.Now;
                usuario.UsuarioModificacion = SessionHelper.UsuarioActualId;

                _usuarioRepository.Actualizar(usuario);

                string accion = activo ? "USER_ACTIVATED" : "USER_DEACTIVATED";
                string mensaje = activo ? "Usuario activado" : "Usuario desactivado";

                RegistrarLog(accion, "Usuarios", $"{mensaje}: {usuario.Username}", usuarioId);

                return ResponseDto.Exito($"{mensaje} exitosamente");
            }
            catch (Exception ex)
            {
                RegistrarLog("ACTIVATE_USER_ERROR", "Usuarios", $"Error activando/desactivando usuario {usuarioId}: {ex.Message}", usuarioId, "ERROR");
                return ResponseDto.Error("Error interno del servidor");
            }
        }

        #endregion

        #region Seguridad

        public ResponseDto BloquearUsuario(int usuarioId, string motivo)
        {
            try
            {
                var usuario = _usuarioRepository.ObtenerPorId(usuarioId);
                if (usuario == null)
                {
                    return ResponseDto.Error("Usuario no encontrado");
                }

                _usuarioRepository.BloquearUsuario(usuarioId, DateTime.Now);

                RegistrarLog("USER_BLOCKED_MANUAL", "Usuarios", $"Usuario bloqueado manualmente: {usuario.Username}. Motivo: {motivo}", usuarioId);

                return ResponseDto.Exito("Usuario bloqueado exitosamente");
            }
            catch (Exception ex)
            {
                RegistrarLog("BLOCK_USER_ERROR", "Usuarios", $"Error bloqueando usuario {usuarioId}: {ex.Message}", usuarioId, "ERROR");
                return ResponseDto.Error("Error interno del servidor");
            }
        }

        public ResponseDto DesbloquearUsuario(int usuarioId)
        {
            try
            {
                var usuario = _usuarioRepository.ObtenerPorId(usuarioId);
                if (usuario == null)
                {
                    return ResponseDto.Error("Usuario no encontrado");
                }

                _usuarioRepository.DesbloquearUsuario(usuarioId);

                RegistrarLog("USER_UNBLOCKED", "Usuarios", $"Usuario desbloqueado: {usuario.Username}", usuarioId);

                return ResponseDto.Exito("Usuario desbloqueado exitosamente");
            }
            catch (Exception ex)
            {
                RegistrarLog("UNBLOCK_USER_ERROR", "Usuarios", $"Error desbloqueando usuario {usuarioId}: {ex.Message}", usuarioId, "ERROR");
                return ResponseDto.Error("Error interno del servidor");
            }
        }

        public ResponseDto<bool> ValidarCredenciales(string username, string password)
        {
            try
            {
                var usuario = _usuarioRepository.ObtenerPorUsername(username);
                if (usuario == null)
                {
                    return ResponseDto<bool>.Exito(false);
                }

                bool esValida = PasswordHelper.VerificarPassword(password, usuario.PasswordHash, usuario.Salt);
                return ResponseDto<bool>.Exito(esValida);
            }
            catch (Exception ex)
            {
                RegistrarLog("VALIDATE_CREDENTIALS_ERROR", "Usuarios", $"Error validando credenciales: {ex.Message}", null, "ERROR");
                return ResponseDto<bool>.Error("Error interno del servidor");
            }
        }

        public ResponseDto<string> GenerarPasswordTemporal(int usuarioId)
        {
            try
            {
                var usuario = _usuarioRepository.ObtenerPorId(usuarioId);
                if (usuario == null)
                {
                    return ResponseDto<string>.Error("Usuario no encontrado");
                }

                string passwordTemporal = PasswordHelper.GenerarPasswordTemporal();
                var (hash, salt) = PasswordHelper.CrearHashCompleto(passwordTemporal);

                usuario.PasswordHash = hash;
                usuario.Salt = salt;
                usuario.FechaModificacion = DateTime.Now;
                usuario.UsuarioModificacion = SessionHelper.UsuarioActualId;

                _usuarioRepository.Actualizar(usuario);

                RegistrarLog("TEMP_PASSWORD_GENERATED", "Usuarios", $"Password temporal generado para: {usuario.Username}", usuarioId);

                return ResponseDto<string>.Exito(passwordTemporal, "Contraseña temporal generada");
            }
            catch (Exception ex)
            {
                RegistrarLog("GENERATE_TEMP_PASSWORD_ERROR", "Usuarios", $"Error generando password temporal: {ex.Message}", usuarioId, "ERROR");
                return ResponseDto<string>.Error("Error interno del servidor");
            }
        }

        #endregion

        #region Validaciones

        public ResponseDto<bool> ValidarUsernameDisponible(string username)
        {
            try
            {
                bool disponible = !_usuarioRepository.ExisteUsername(username);
                return ResponseDto<bool>.Exito(disponible);
            }
            catch (Exception ex)
            {
                RegistrarLog("VALIDATE_USERNAME_ERROR", "Usuarios", $"Error validando username: {ex.Message}", null, "ERROR");
                return ResponseDto<bool>.Error("Error interno del servidor");
            }
        }

        public ResponseDto<bool> ValidarEmailDisponible(string email)
        {
            try
            {
                bool disponible = !_usuarioRepository.ExisteEmail(email);
                return ResponseDto<bool>.Exito(disponible);
            }
            catch (Exception ex)
            {
                RegistrarLog("VALIDATE_EMAIL_ERROR", "Usuarios", $"Error validando email: {ex.Message}", null, "ERROR");
                return ResponseDto<bool>.Error("Error interno del servidor");
            }
        }

        #endregion

        #region Métodos privados

        private UsuarioDto MapearAUsuarioDto(Usuario usuario)
        {
            return new UsuarioDto
            {
                Id = usuario.Id,
                Username = usuario.Username,
                Email = usuario.Email,
                NombreCompleto = usuario.NombreCompleto,
                Rol = usuario.Rol,
                FechaCreacion = usuario.FechaCreacion,
                UltimoLogin = usuario.UltimoLogin,
                Activo = usuario.Activo
            };
        }

        private ResponseDto ValidarRegistro(RegistroDto registroDto)
        {
            var errores = new List<string>();

            if (string.IsNullOrWhiteSpace(registroDto.Username))
                errores.Add("El nombre de usuario es requerido");

            if (string.IsNullOrWhiteSpace(registroDto.Email))
                errores.Add("El email es requerido");

            if (string.IsNullOrWhiteSpace(registroDto.Password))
                errores.Add("La contraseña es requerida");

            // Validar fortaleza de contraseña
            var validacionPassword = PasswordHelper.ValidarFortaleza(registroDto.Password);
            if (!string.IsNullOrEmpty(validacionPassword))
                errores.Add(validacionPassword);

            // Validar confirmación de contraseña
            if (registroDto.Password != registroDto.ConfirmarPassword)
                errores.Add("Las contraseñas no coinciden");

            // Validar formato de email
            if (!string.IsNullOrWhiteSpace(registroDto.Email) && 
                !System.Text.RegularExpressions.Regex.IsMatch(registroDto.Email, 
                @"^[^@\s]+@[^@\s]+\.[^@\s]+$"))
                errores.Add("Formato de email inválido");

            if (errores.Any())
            {
                return ResponseDto.Error("Datos de registro inválidos", errores);
            }

            return ResponseDto.Exito();
        }

        private void RegistrarLog(string accion, string tabla, string detalle, int? usuarioId = null, string severidad = "INFO")
        {
            try
            {
                var log = new Log
                {
                    UsuarioId = usuarioId,
                    Username = SessionHelper.UsuarioActualUsername,
                    Accion = accion,
                    Tabla = tabla,
                    DetalleDepues = detalle,
                    Fecha = DateTime.Now,
                    IP = SessionHelper.ObtenerIPCliente(),
                    UserAgent = SessionHelper.ObtenerUserAgent(),
                    Severidad = severidad,
                    Exitoso = severidad != "ERROR"
                };

                _logRepository.Agregar(log);
            }
            catch
            {
                // No hacer nada si falla el logging para evitar errores en cascada
            }
        }

        #endregion
    }
}