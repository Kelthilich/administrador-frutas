using System;
using System.Web;
using frutas.Models;

namespace frutas.Security
{
    /// <summary>
    /// Helper para manejar sesiones de usuario en Web Forms
    /// Proporciona métodos seguros para autenticación y autorización
    /// </summary>
    public static class SessionHelper
    {
        #region Constantes de Sesión
        private const string USUARIO_SESSION_KEY = "UsuarioLogueado";
        private const string USUARIO_ID_SESSION_KEY = "UsuarioId";
        private const string USUARIO_USERNAME_SESSION_KEY = "Username";
        private const string USUARIO_ROL_SESSION_KEY = "UsuarioRol";
        private const string LOGIN_TIME_SESSION_KEY = "LoginTime";
        private const string LAST_ACTIVITY_SESSION_KEY = "LastActivity";
        #endregion

        #region Propiedades de Usuario Actual
        /// <summary>
        /// Obtiene el usuario actualmente logueado
        /// </summary>
        public static Usuario UsuarioActual
        {
            get
            {
                return HttpContext.Current?.Session?[USUARIO_SESSION_KEY] as Usuario;
            }
        }

        /// <summary>
        /// Obtiene el ID del usuario actual
        /// </summary>
        public static int? UsuarioActualId
        {
            get
            {
                var usuario = UsuarioActual;
                return usuario?.Id;
            }
        }

        /// <summary>
        /// Obtiene el username del usuario actual
        /// </summary>
        public static string UsuarioActualUsername
        {
            get
            {
                var usuario = UsuarioActual;
                return usuario?.Username;
            }
        }

        /// <summary>
        /// Obtiene el rol del usuario actual
        /// </summary>
        public static string UsuarioActualRol
        {
            get
            {
                var usuario = UsuarioActual;
                return usuario?.Rol;
            }
        }

        /// <summary>
        /// Verifica si hay un usuario logueado
        /// </summary>
        public static bool EstaLogueado
        {
            get
            {
                return UsuarioActual != null && !SesionExpirada;
            }
        }

        /// <summary>
        /// Verifica si la sesión ha expirado (más de 30 minutos de inactividad)
        /// </summary>
        public static bool SesionExpirada
        {
            get
            {
                var lastActivity = HttpContext.Current?.Session?[LAST_ACTIVITY_SESSION_KEY] as DateTime?;
                if (!lastActivity.HasValue) return true;
                
                return DateTime.Now.Subtract(lastActivity.Value).TotalMinutes > 30;
            }
        }
        #endregion

        #region Métodos de Autenticación
        /// <summary>
        /// Inicia sesión para un usuario
        /// </summary>
        /// <param name="usuario">Usuario que se loguea</param>
        public static void IniciarSesion(Usuario usuario)
        {
            if (usuario == null)
                throw new ArgumentNullException(nameof(usuario));

            var session = HttpContext.Current?.Session;
            if (session == null)
                throw new InvalidOperationException("No hay contexto de sesión disponible");

            // Regenerar ID de sesión por seguridad
            session.Abandon();
            session.Clear();

            // Establecer datos de sesión
            session[USUARIO_SESSION_KEY] = usuario;
            session[USUARIO_ID_SESSION_KEY] = usuario.Id;
            session[USUARIO_USERNAME_SESSION_KEY] = usuario.Username;
            session[USUARIO_ROL_SESSION_KEY] = usuario.Rol;
            session[LOGIN_TIME_SESSION_KEY] = DateTime.Now;
            session[LAST_ACTIVITY_SESSION_KEY] = DateTime.Now;

            // Configurar timeout de sesión (30 minutos)
            session.Timeout = 30;
        }

        /// <summary>
        /// Cierra la sesión actual
        /// </summary>
        public static void CerrarSesion()
        {
            var session = HttpContext.Current?.Session;
            session?.Clear();
            session?.Abandon();
        }

        /// <summary>
        /// Actualiza la última actividad del usuario
        /// </summary>
        public static void ActualizarActividad()
        {
            var session = HttpContext.Current?.Session;
            if (session != null && EstaLogueado)
            {
                session[LAST_ACTIVITY_SESSION_KEY] = DateTime.Now;
            }
        }
        #endregion

        #region Métodos de Autorización
        /// <summary>
        /// Verifica si el usuario actual tiene un rol específico
        /// </summary>
        /// <param name="rol">Rol a verificar</param>
        /// <returns>True si tiene el rol</returns>
        public static bool TieneRol(string rol)
        {
            if (!EstaLogueado) return false;
            return string.Equals(UsuarioActualRol, rol, StringComparison.OrdinalIgnoreCase);
        }

        /// <summary>
        /// Verifica si el usuario actual es administrador
        /// </summary>
        public static bool EsAdministrador
        {
            get { return TieneRol("Administrador") || TieneRol("Admin"); }
        }

        /// <summary>
        /// Verifica si el usuario actual puede editar un registro
        /// </summary>
        /// <param name="usuarioCreadorId">ID del usuario que creó el registro</param>
        /// <returns>True si puede editar</returns>
        public static bool PuedeEditar(int? usuarioCreadorId)
        {
            if (!EstaLogueado) return false;
            if (EsAdministrador) return true;
            return UsuarioActualId == usuarioCreadorId;
        }

        /// <summary>
        /// Verifica si el usuario actual puede eliminar un registro
        /// </summary>
        /// <param name="usuarioCreadorId">ID del usuario que creó el registro</param>
        /// <returns>True si puede eliminar</returns>
        public static bool PuedeEliminar(int? usuarioCreadorId)
        {
            // Solo administradores pueden eliminar, o el mismo usuario que creó el registro
            if (!EstaLogueado) return false;
            if (EsAdministrador) return true;
            return UsuarioActualId == usuarioCreadorId;
        }
        #endregion

        #region Métodos de Utilidad
        /// <summary>
        /// Obtiene información de la sesión actual para logging
        /// </summary>
        /// <returns>String con información de la sesión</returns>
        public static string ObtenerInfoSesion()
        {
            if (!EstaLogueado) return "Usuario anónimo";

            var loginTime = HttpContext.Current?.Session?[LOGIN_TIME_SESSION_KEY] as DateTime?;
            var lastActivity = HttpContext.Current?.Session?[LAST_ACTIVITY_SESSION_KEY] as DateTime?;

            return $"Usuario: {UsuarioActualUsername}, ID: {UsuarioActualId}, " +
                   $"Rol: {UsuarioActualRol}, Login: {loginTime?.ToString("yyyy-MM-dd HH:mm:ss")}, " +
                   $"Última actividad: {lastActivity?.ToString("yyyy-MM-dd HH:mm:ss")}";
        }

        /// <summary>
        /// Verifica y limpia sesiones expiradas
        /// </summary>
        public static void VerificarSesion()
        {
            if (SesionExpirada)
            {
                CerrarSesion();
            }
            else if (EstaLogueado)
            {
                ActualizarActividad();
            }
        }

        /// <summary>
        /// Redirige a la página de login si no está autenticado
        /// </summary>
        /// <param name="returnUrl">URL de retorno después del login</param>
        public static void RequiereAutenticacion(string returnUrl = null)
        {
            if (!EstaLogueado)
            {
                var loginUrl = "~/Login.aspx";
                if (!string.IsNullOrEmpty(returnUrl))
                {
                    loginUrl += "?returnUrl=" + HttpUtility.UrlEncode(returnUrl);
                }
                HttpContext.Current?.Response.Redirect(loginUrl);
            }
        }

        /// <summary>
        /// Redirige si el usuario no tiene el rol requerido
        /// </summary>
        /// <param name="rolRequerido">Rol requerido</param>
        /// <param name="paginaError">Página de error (por defecto AccessDenied.aspx)</param>
        public static void RequiereRol(string rolRequerido, string paginaError = "~/AccessDenied.aspx")
        {
            RequiereAutenticacion();
            
            if (!TieneRol(rolRequerido))
            {
                HttpContext.Current?.Response.Redirect(paginaError);
            }
        }

        /// <summary>
        /// Obtiene la IP del cliente actual
        /// </summary>
        /// <returns>Dirección IP</returns>
        public static string ObtenerIPCliente()
        {
            var request = HttpContext.Current?.Request;
            if (request == null) return "Unknown";

            string ip = request.ServerVariables["HTTP_X_FORWARDED_FOR"];
            if (string.IsNullOrEmpty(ip))
                ip = request.ServerVariables["REMOTE_ADDR"];
            if (string.IsNullOrEmpty(ip))
                ip = request.UserHostAddress;

            return ip ?? "Unknown";
        }

        /// <summary>
        /// Obtiene el User Agent del cliente actual
        /// </summary>
        /// <returns>User Agent string</returns>
        public static string ObtenerUserAgent()
        {
            return HttpContext.Current?.Request?.UserAgent ?? "Unknown";
        }
        #endregion
    }
}