using System;
using System.Web.UI;
using frutas.DTOs;
using frutas.Security;
using frutas.Services;

namespace frutas.Frutas
{
    public partial class EditarFruta : Page
    {
        private readonly FrutaService _frutaService;
        private int FrutaId
        {
            get
            {
                if (int.TryParse(Request.QueryString["id"], out int id))
                    return id;
                return 0;
            }
        }

        private FrutaDto FrutaOriginal
        {
            get { return ViewState["FrutaOriginal"] as FrutaDto; }
            set { ViewState["FrutaOriginal"] = value; }
        }

        public EditarFruta()
        {
            _frutaService = new FrutaService();
        }

        protected void Page_Load(object sender, EventArgs e)
        {
            // Verificar autenticación
            SiteMaster.RequireLogin();

            if (!IsPostBack)
            {
                if (FrutaId <= 0)
                {
                    MostrarError("ID de fruta no válido");
                    return;
                }

                CargarFruta();
            }
        }

        /// <summary>
        /// Carga la fruta desde la base de datos
        /// </summary>
        private void CargarFruta()
        {
            try
            {
                pnlCargando.Visible = true;
                pnlError.Visible = false;
                pnlFormulario.Visible = false;

                var resultado = _frutaService.ObtenerPorId(FrutaId);

                if (resultado.Exitoso && resultado.Data != null)
                {
                    var fruta = resultado.Data;

                    // Verificar permisos
                    if (!SessionHelper.PuedeEditar(fruta.UsuarioCreador == SessionHelper.UsuarioActualUsername ? 
                        SessionHelper.UsuarioActualId : null))
                    {
                        MostrarError("No tiene permisos para editar esta fruta");
                        return;
                    }

                    // Guardar fruta original para comparaciones
                    FrutaOriginal = fruta;

                    // Cargar datos en el formulario
                    CargarDatosEnFormulario(fruta);
                    
                    // Mostrar formulario
                    pnlCargando.Visible = false;
                    pnlFormulario.Visible = true;
                }
                else
                {
                    MostrarError(resultado.Mensaje ?? "Fruta no encontrada");
                }
            }
            catch (Exception ex)
            {
                MostrarError($"Error cargando la fruta: {ex.Message}");
            }
        }

        /// <summary>
        /// Carga los datos de la fruta en el formulario
        /// </summary>
        private void CargarDatosEnFormulario(FrutaDto fruta)
        {
            // Información básica
            txtNombre.Text = fruta.Nombre;
            txtDescripcion.Text = fruta.Descripcion ?? string.Empty;

            // Seleccionar categoría
            if (!string.IsNullOrEmpty(fruta.Categoria))
            {
                ddlCategoria.SelectedValue = fruta.Categoria;
            }

            // Seleccionar país
            if (!string.IsNullOrEmpty(fruta.PaisOrigen))
            {
                ddlPaisOrigen.SelectedValue = fruta.PaisOrigen;
            }

            // Información comercial
            txtPrecio.Text = fruta.Precio.ToString("0.00");
            txtStock.Text = fruta.Stock.ToString();

            // Temporada
            if (!string.IsNullOrEmpty(fruta.Temporada))
            {
                ddlTemporada.SelectedValue = fruta.Temporada;
            }

            // Fecha de vencimiento
            if (fruta.FechaVencimiento.HasValue)
            {
                txtFechaVencimiento.Text = fruta.FechaVencimiento.Value.ToString("yyyy-MM-dd");
            }

            // Es orgánica
            chkEsOrganica.Checked = fruta.EsOrganica;

            // Información de cabecera
            lblFrutaId.Text = fruta.Id.ToString();
            lblNombreFruta.Text = fruta.Nombre;
            lblUsuarioCreador.Text = fruta.UsuarioCreador ?? "Sistema";
            lblFechaCreacion.Text = fruta.FechaCreacion.ToString("dd/MM/yyyy HH:mm");

            // Información de auditoría
            CargarInformacionAuditoria(fruta);

            pnlFrutaInfo.Visible = true;
        }

        /// <summary>
        /// Carga la información de auditoría
        /// </summary>
        private void CargarInformacionAuditoria(FrutaDto fruta)
        {
            lblCreadoPor.Text = fruta.UsuarioCreador ?? "Sistema";
            lblFechaCreacion2.Text = fruta.FechaCreacion.ToString("dd/MM/yyyy HH:mm");

            if (fruta.FechaModificacion.HasValue)
            {
                lblUltimaModificacion.Text = fruta.FechaModificacion.Value.ToString("dd/MM/yyyy HH:mm");
                lblModificadoPor.Text = "Sistema"; // Simplificado ya que no tenemos este campo
            }
            else
            {
                lblUltimaModificacion.Text = "Sin modificaciones";
                lblModificadoPor.Text = "-";
            }
        }

        /// <summary>
        /// Maneja el evento de guardar cambios
        /// </summary>
        protected void btnGuardar_Click(object sender, EventArgs e)
        {
            if (!Page.IsValid)
                return;

            try
            {
                // Crear DTO con los datos actualizados
                var frutaActualizada = CrearFrutaDto();

                // Validaciones adicionales
                var validationResult = ValidacionesAdicionales(frutaActualizada);
                if (!validationResult.IsValid)
                {
                    MostrarAlertaFormulario(string.Join("<br/>", validationResult.Errors), "danger");
                    return;
                }

                // Actualizar usando el servicio
                var resultado = _frutaService.Actualizar(FrutaId, frutaActualizada);

                if (resultado.Exitoso)
                {
                    // Éxito - redirigir con mensaje
                    Session["AlertMessage"] = $"¡Fruta '{frutaActualizada.Nombre}' actualizada exitosamente!";
                    Session["AlertType"] = "success";
                    Response.Redirect("ListaFrutas.aspx");
                }
                else
                {
                    // Error del servicio
                    string mensajeError = resultado.Mensaje;
                    if (resultado.Errores != null && resultado.Errores.Count > 0)
                    {
                        mensajeError += "<br/><br/>Detalles:<br/>" + string.Join("<br/>", resultado.Errores);
                    }
                    MostrarAlertaFormulario(mensajeError, "danger");
                }
            }
            catch (Exception ex)
            {
                MostrarAlertaFormulario($"Error interno del sistema: {ex.Message}", "danger");
            }
        }

        /// <summary>
        /// Maneja el evento de recargar datos
        /// </summary>
        protected void btnRecargar_Click(object sender, EventArgs e)
        {
            CargarFruta();
            MostrarAlertaFormulario("Datos recargados desde la base de datos", "info");
        }

        /// <summary>
        /// Crea el DTO de fruta con los datos del formulario
        /// </summary>
        private FrutaFormDto CrearFrutaDto()
        {
            return new FrutaFormDto
            {
                Id = FrutaId,
                Nombre = txtNombre.Text.Trim(),
                Descripcion = string.IsNullOrWhiteSpace(txtDescripcion.Text) ? null : txtDescripcion.Text.Trim(),
                Precio = decimal.Parse(txtPrecio.Text),
                Stock = int.Parse(txtStock.Text),
                Categoria = string.IsNullOrEmpty(ddlCategoria.SelectedValue) ? null : ddlCategoria.SelectedValue,
                PaisOrigen = string.IsNullOrEmpty(ddlPaisOrigen.SelectedValue) ? null : ddlPaisOrigen.SelectedValue,
                Temporada = string.IsNullOrEmpty(ddlTemporada.SelectedValue) ? null : ddlTemporada.SelectedValue,
                EsOrganica = chkEsOrganica.Checked,
                FechaVencimiento = string.IsNullOrEmpty(txtFechaVencimiento.Text) ? 
                    (DateTime?)null : DateTime.Parse(txtFechaVencimiento.Text)
            };
        }

        /// <summary>
        /// Realiza validaciones adicionales específicas del negocio
        /// </summary>
        private frutas.Validators.ValidationResult ValidacionesAdicionales(FrutaFormDto fruta)
        {
            var result = new frutas.Validators.ValidationResult();

            // Usar el validador de negocio
            var validacionNegocio = frutas.Validators.FrutaValidator.ValidarFrutaForm(fruta);
            if (!validacionNegocio.IsValid)
            {
                result.AddErrors(validacionNegocio.Errors);
            }

            // Validaciones específicas para edición
            if (FrutaOriginal != null)
            {
                // Advertir sobre cambios significativos en el precio
                var cambioprecio = Math.Abs(fruta.Precio - FrutaOriginal.Precio);
                var porcentajeCambio = (cambioprecio / FrutaOriginal.Precio) * 100;
                
                if (porcentajeCambio > 50)
                {
                    result.AddError($"El cambio en el precio es muy significativo ({porcentajeCambio:F1}%). ¿Está seguro?");
                }

                // Advertir sobre reducción drástica de stock
                if (fruta.Stock < FrutaOriginal.Stock * 0.1 && FrutaOriginal.Stock > 10)
                {
                    result.AddError("La reducción del stock es muy drástica. ¿Está seguro?");
                }
            }

            // Validaciones adicionales
            if (fruta.Precio > 1000)
            {
                result.AddError("El precio parece muy alto. ¿Está seguro que es correcto?");
            }

            if (fruta.Stock > 10000)
            {
                result.AddError("El stock parece muy alto. ¿Está seguro que es correcto?");
            }

            // Validar fecha de vencimiento
            if (fruta.FechaVencimiento.HasValue)
            {
                if (fruta.FechaVencimiento.Value <= DateTime.Now.Date)
                {
                    result.AddError("La fecha de vencimiento debe ser futura");
                }

                if (fruta.FechaVencimiento.Value > DateTime.Now.Date.AddYears(2))
                {
                    result.AddError("La fecha de vencimiento no puede ser más de 2 años en el futuro");
                }
            }

            return result;
        }

        /// <summary>
        /// Muestra un mensaje de error en la página principal
        /// </summary>
        private void MostrarError(string mensaje)
        {
            lblMensajeError.Text = mensaje;
            pnlCargando.Visible = false;
            pnlFormulario.Visible = false;
            pnlError.Visible = true;
        }

        /// <summary>
        /// Muestra una alerta en el formulario
        /// </summary>
        private void MostrarAlertaFormulario(string mensaje, string tipo)
        {
            var master = this.Master as SiteMaster;
            master?.MostrarAlerta(mensaje, tipo);

            // Scroll hacia arriba para mostrar el mensaje
            ScriptManager.RegisterStartupScript(this, GetType(), "ScrollToTop",
                "$(document).ready(function() { $('html, body').animate({ scrollTop: 0 }, 500); });", true);
        }

        /// <summary>
        /// Override del método Render para agregar atributos a los controles
        /// </summary>
        protected override void Render(System.Web.UI.HtmlTextWriter writer)
        {
            // Agregar atributos para mejor UX
            txtNombre.Attributes.Add("autocomplete", "off");
            txtDescripcion.Attributes.Add("autocomplete", "off");
            txtPrecio.Attributes.Add("step", "0.01");
            txtPrecio.Attributes.Add("min", "0.01");
            txtStock.Attributes.Add("min", "0");
            
            // Agregar validación JavaScript
            btnGuardar.Attributes.Add("onclick", "return validarFormulario();");
            
            base.Render(writer);
        }
    }
}