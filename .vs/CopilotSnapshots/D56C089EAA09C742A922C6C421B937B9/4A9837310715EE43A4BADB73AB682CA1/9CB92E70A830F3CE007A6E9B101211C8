using System;
using System.Linq;
using System.Web.UI;
using frutas.Security;
using frutas.Services;

namespace frutas
{
    public partial class _Default : Page
    {
        private readonly FrutaService _frutaService;
        private readonly LogService _logService;

        public _Default()
        {
            _frutaService = new FrutaService();
            _logService = new LogService();
        }

        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                ConfigurarInterfaz();
                if (SessionHelper.EstaLogueado)
                {
                    CargarDashboard();
                }
                else
                {
                    MostrarSeccionPublica();
                }
            }
        }

        /// <summary>
        /// Configura la interfaz según el usuario logueado
        /// </summary>
        private void ConfigurarInterfaz()
        {
            if (SessionHelper.EstaLogueado)
            {
                // Mostrar secciones para usuarios logueados
                pnlWelcomeActions.Visible = true;
                pnlPublicSection.Visible = false;

                // Configurar acciones según el rol
                if (SessionHelper.EsAdministrador)
                {
                    divAdminActions.Visible = true;
                    divLogActions.Visible = true;
                    divVerMasLogs.Visible = true;
                }
                else
                {
                    divAdminActions.Visible = false;
                    divLogActions.Visible = false;
                    divVerMasLogs.Visible = false;
                }
            }
            else
            {
                // Mostrar sección pública
                pnlWelcomeActions.Visible = false;
                pnlPublicSection.Visible = true;
            }
        }

        /// <summary>
        /// Muestra la sección pública para usuarios no autenticados
        /// </summary>
        private void MostrarSeccionPublica()
        {
            pnlPublicSection.Visible = true;
            
            // Ocultar todas las secciones de datos
            pnlNoActivity.Visible = true;
            pnlSinAlertas.Visible = true;
            pnlStockBajo.Visible = false;
            pnlProximasVencer.Visible = false;
        }

        /// <summary>
        /// Carga todos los datos del dashboard
        /// </summary>
        private void CargarDashboard()
        {
            try
            {
                CargarEstadisticas();
                CargarActividadReciente();
                CargarCategorias();
                CargarAlertas();
            }
            catch (Exception ex)
            {
                var master = this.Master as SiteMaster;
                master?.MostrarAlerta($"Error cargando el dashboard: {ex.Message}", "danger");
            }
        }

        /// <summary>
        /// Carga las estadísticas principales
        /// </summary>
        private void CargarEstadisticas()
        {
            var estadisticasResult = _frutaService.ObtenerEstadisticas();
            
            if (estadisticasResult.Exitoso)
            {
                var stats = estadisticasResult.Data;
                
                lblTotalFrutas.Text = stats.TotalFrutas.ToString();
                lblValorInventario.Text = stats.ValorTotalInventario.ToString("N2");
                lblStockTotal.Text = stats.StockTotal.ToString();
                
                // Obtener frutas con stock bajo
                var stockBajoResult = _frutaService.ObtenerConStockBajo(10);
                if (stockBajoResult.Exitoso)
                {
                    lblStockBajo.Text = stockBajoResult.Data.Count().ToString();
                }
            }
            else
            {
                // Valores por defecto en caso de error
                lblTotalFrutas.Text = "N/A";
                lblValorInventario.Text = "N/A";
                lblStockTotal.Text = "N/A";
                lblStockBajo.Text = "N/A";
            }
        }

        /// <summary>
        /// Carga la actividad reciente del sistema
        /// </summary>
        private void CargarActividadReciente()
        {
            if (SessionHelper.PuedeVerLogs())
            {
                var filtro = new DTOs.LogFiltroDto
                {
                    Pagina = 1,
                    TamañoPagina = 10
                };

                var logsResult = _logService.ObtenerConFiltros(filtro);
                
                if (logsResult.Exitoso && logsResult.Data.Any())
                {
                    rptActividades.DataSource = logsResult.Data.Take(5); // Solo mostrar 5
                    rptActividades.DataBind();
                    pnlNoActivity.Visible = false;
                }
                else
                {
                    pnlNoActivity.Visible = true;
                }
            }
            else
            {
                pnlNoActivity.Visible = true;
            }
        }

        /// <summary>
        /// Carga las estadísticas por categoría
        /// </summary>
        private void CargarCategorias()
        {
            var estadisticasResult = _frutaService.ObtenerEstadisticas();
            
            if (estadisticasResult.Exitoso)
            {
                var stats = estadisticasResult.Data;
                
                if (stats.EstadisticasPorCategoria.Any())
                {
                    rptCategorias.DataSource = stats.EstadisticasPorCategoria.Take(5); // Top 5
                    rptCategorias.DataBind();
                }
            }
        }

        /// <summary>
        /// Carga las alertas del sistema
        /// </summary>
        private void CargarAlertas()
        {
            bool hayAlertas = false;

            // Verificar stock bajo
            var stockBajoResult = _frutaService.ObtenerConStockBajo(10);
            if (stockBajoResult.Exitoso && stockBajoResult.Data.Any())
            {
                rptStockBajo.DataSource = stockBajoResult.Data.Take(5);
                rptStockBajo.DataBind();
                pnlStockBajo.Visible = true;
                hayAlertas = true;
            }

            // Verificar frutas próximas a vencer
            var proximasVencerResult = _frutaService.ObtenerProximasAVencer(7);
            if (proximasVencerResult.Exitoso && proximasVencerResult.Data.Any())
            {
                rptProximasVencer.DataSource = proximasVencerResult.Data.Take(5);
                rptProximasVencer.DataBind();
                pnlProximasVencer.Visible = true;
                hayAlertas = true;
            }

            // Mostrar panel de "sin alertas" si no hay alertas
            pnlSinAlertas.Visible = !hayAlertas;
        }

        #region Métodos Helper para DataBinding

        /// <summary>
        /// Obtiene el color CSS para el tipo de actividad
        /// </summary>
        protected string GetActivityColor(string severidad)
        {
            switch (severidad?.ToUpper())
            {
                case "ERROR":
                case "CRITICAL":
                    return "danger";
                case "WARNING":
                    return "warning";
                case "INFO":
                    return "info";
                default:
                    return "primary";
            }
        }

        /// <summary>
        /// Obtiene el icono FontAwesome para el tipo de acción
        /// </summary>
        protected string GetActivityIcon(string accion)
        {
            if (string.IsNullOrEmpty(accion))
                return "fa-info-circle";

            accion = accion.ToUpper();

            if (accion.Contains("LOGIN"))
                return "fa-sign-in-alt";
            else if (accion.Contains("LOGOUT"))
                return "fa-sign-out-alt";
            else if (accion.Contains("CREATE") || accion.Contains("CREATED"))
                return "fa-plus-circle";
            else if (accion.Contains("UPDATE") || accion.Contains("UPDATED"))
                return "fa-edit";
            else if (accion.Contains("DELETE") || accion.Contains("DELETED"))
                return "fa-trash";
            else if (accion.Contains("ERROR"))
                return "fa-exclamation-triangle";
            else if (accion.Contains("WARNING"))
                return "fa-exclamation-circle";
            else
                return "fa-info-circle";
        }

        #endregion
    }
}